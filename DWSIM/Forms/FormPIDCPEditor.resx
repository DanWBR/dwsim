<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4nWB9e6Bl2nug
        Zdp7oGXaeJ5hjAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjaVy4omlcPSJpXD0iaVw9H6h
        Z/uRtoL/qs2h/5W6hv+Op3Twz7qnyc+6p8nPuqfJz7qnyc+6p8nPuqfJz7qnyc+6p8nPuqfJz7qnyc+6
        p8nPuqfJz7qnyc+6p8nPuqfJz7qnyc+6p8nPuqfJzLikqQAAAAAAAAAAAAAAAAAAAACAoWj9nMCO/6XJ
        m/+lyZv/ia53/5zAjv+94Lr/ocWV/5ixgv/l2sz/5drM/+XazP/l2sz/5drM/+XazP/l2sz/5drM/+Xa
        zP/l2sz/5drM/+XazP/l2sz/5drM/+XazP/l2sz/5drM/+DSxP/OuabpAAAAAAAAAAAAAAAAAAAAAICh
        aP2u0qf/veC6/73guv+St4P/nMCO/73guv+hxZX/nLaH//Lr4f/y6+H/8uvh//Lr4f/y6+H/8uvh//Lr
        4f/y6+H/8uvh//Lr4f/y6+H/8uvh//Lr4f/y6+H/8uvh//Lr4f/y6+H/6+DU/865pukAAAAAAAAAAAAA
        AAAAAAAAgKFo/ZC1gP+WvIj/lryI/4SpcP+cwI7/veC6/6HFlf+Wrn7/3s/A/97PwP/ez8D/3s/A/97P
        wP/ez8D/3s/A/97PwP/ez8D/3s/A/97PwP/ez8D/3s/A/97PwP/ez8D/3s/A/97PwP/ay7r/zrmm6QAA
        AAAAAAAAAAAAAAAAAACUpnW1kaR0yJGkdMiRpHTIgKBn64qveP+cwI7/jbF7/4mlb93NtqSJzbakic22
        pInNtqSJzbakic22pInNtqSJzbakic22pInNtqSJzbakic22pInNtqSJzbakic22pInNtqSJzbakic22
        pInLuKJ2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB5nGBdeJ5ioXieYqF4nmKhd5xhZwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdJteLnad
        XTR2nV00dp1dNHWfYBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn6iAOJ2p
        fkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2p
        fkF5nWHwfKBl+H2iZ/d5nmH7gp5ni8y2oCPMtqAjzLagI8y2oCPMtqAjzLuiHgAAAAAAAAAAAAAAAAAA
        AACBoWf8ep9i/3ufY/97n2P/e59j/3ufY/97n2P/e59j/3ufY/97n2P/e59j/3ufY/97n2P/e59j/3uf
        Y/97n2P/e59j/3meYv+w1Kn/veC6/5G2gf+kq4T8zbmm+c25pvnNuab5zbmm+c25pfrNuKXlAAAAAAAA
        AAAAAAAAAAAAAIChaP2u0qf/veC6/73guv+94Lr/veC6/73guv+94Lr/veC6/73guv+94Lr/veC6/73g
        uv+94Lr/veC6/73guv+94Lr/fqNo/7DUqf+94Lr/kraC/7jFo//y6+H/8uvh//Lr4f/y6+H/6+DU/865
        pukAAAAAAAAAAAAAAAAAAAAAgKFo/a7Sp/+94Lr/veC6/73guv+94Lr/veC6/73guv+94Lr/veC6/73g
        uv+94Lr/veC6/73guv+94Lr/veC6/73guv9+o2j/sNSp/73guv+StoL/uMWj//Lr4f/y6+H/8uvh//Lr
        4f/r4NT/zrmm6QAAAAAAAAAAAAAAAAAAAACBoWf8ep9i/3ufY/97n2P/e59j/3ufY/97n2P/e59j/3uf
        Y/97n2P/e59j/3ufY/97n2P/e59j/3ufY/97n2P/e59j/3meYv+w1Kn/veC6/5G2gf+kq4T8zbmm+c25
        pvnNuab5zbmm+c25pfrNuKXlAAAAAAAAAAAAAAAAAAAAAJ+ogDidqX5Bnal+QZ2pfkGdqX5Bnal+QZ2p
        fkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2pfkGdqX5Bnal+QZ2pfkGdqX5BeZ1h8HygZfh9omf3eZ5h+4Ke
        Z4vMtqAjzLagI8y2oCPMtqAjzLagI8y7oh4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB0m14udp1dNHad
        XTR2nV00dZ9gGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdptdKXidYp94nmKheJ5ioXec
        YJ0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAACUpnW1kaR0yJGkdMiRpHTIkaR0yJGkdMiRpHTIkaR0yJGkdMiIoWzXfKFl/pzA
        jv+Zvoz/dpxe/822pInNtqSJzbakic22pInNtqSJzbakic22pInNtqSJzbakic22pInNtqSJzbakic22
        pInLuKJ2AAAAAAAAAAAAAAAAAAAAAIChaP2QtYD/lryI/5a8iP+WvIj/lryI/5a8iP+WvIj/lryI/42z
        fP+Cp27/veC6/7jbtP92nF7/3s/A/97PwP/ez8D/3s/A/97PwP/ez8D/3s/A/97PwP/ez8D/3s/A/97P
        wP/ez8D/2su6/865pukAAAAAAAAAAAAAAAAAAAAAgKFo/a7Sp/+94Lr/veC6/73guv+94Lr/veC6/73g
        uv+94Lr/qs2h/4SpcP+94Lr/uNu0/3acXv/y6+H/8uvh//Lr4f/y6+H/8uvh//Lr4f/y6+H/8uvh//Lr
        4f/y6+H/8uvh//Lr4f/r4NT/zrmm6QAAAAAAAAAAAAAAAAAAAACAoWj9nMCO/6XJm/+lyZv/pcmb/6XJ
        m/+lyZv/pcmb/6XJm/+YvYr/g6hv/73guv+427T/dpxe/+XazP/l2sz/5drM/+XazP/l2sz/5drM/+Xa
        zP/l2sz/5drM/+XazP/l2sz/5drM/+DSxP/OuabpAAAAAAAAAAAAAAAAAAAAAI2lcuKJpXD0iaVw9Iml
        cPSJpXD0iaVw9ImlcPSJpXD0iaVw9ISiavd+o2j/qs2h/6bKnP92nF7/z7qnyc+6p8nPuqfJz7qnyc+6
        p8nPuqfJz7qnyc+6p8nPuqfJz7qnyc+6p8nPuqfJz7qnycy4pKkAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdJ5dN3meYtd7oGXae6Bl2nmdYtMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////////h///8AAAAPAAAADwAAAA8AAAAPAAAAH/j//////
        ////////////////4P/AAAADwAAAA8AAAAPAAAAD///g///////////////////w///AAAAHwAAAA8AA
        AAPAAAADwAAAA//w//////////////////8=
</value>
  </data>
</root>